{"version":3,"sources":["../node_modules/require-context sync","images/asb.jpg","components/Header/Header.tsx","components/MainComponent/MainComponent.tsx","components/WorkExperienceComponent/work-exp.js","components/WorkExperienceComponent/WorkExperience.tsx","components/ProjectsComponent/ProjectsComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Header","classes","makeStyles","root","background","boxShadow","toolBarProps","justifyContent","buttonProperties","color","textAlign","useStyles","AppBar","position","Toolbar","href","MainComponent","console","log","axios","get","then","res","blob","Blob","body","download","className","src","require","alt","Button","onClick","this","downloadCv","React","workExperience","WorkExperience","props","state","setState","Component","ProjectsComponent","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kGAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,I,2ICRzBF,EAAOC,QAAU,IAA0B,iC,qKCiD5BE,MAtCf,WACE,IAcMC,EAdYC,YAAW,CAC3BC,KAAM,CACJC,WAAY,QACZC,UAAW,QAEbC,aAAe,CACbC,eAAgB,UAElBC,iBAAkB,CAEhBC,MAAO,QACPC,UAAW,UAGCC,GAMhB,OACE,gBAACC,EAAA,EAAD,CAAQC,SAAS,SAASZ,QAAS,CAAEE,KAAMF,EAAQE,OACjD,gBAACW,EAAA,EAAD,CAASb,QAAS,CAACE,KAAMF,EAAQK,eAE7B,sBAAIP,GAAG,mBACL,0BAAI,qBAAGgB,KAAK,KAAR,SAEJ,0BAAI,qBAAGA,KAAK,eAAR,qBACJ,0BAAI,qBAAGA,KAAK,aAAR,cACJ,0BAAI,qBAAGA,KAAK,aAAR,iB,2GC0BDC,E,mOApDPC,QAAQC,IAAI,kBACZC,IAAMC,IAAI,2CAA2CC,MAAK,SAACC,GACvD,IAAMC,EAAO,IAAIC,KAAK,CAACF,EAAIG,OAC3BC,IAASH,EAAM,2B,+BAKnB,OACI,uBAAKI,UAAU,iBAaX,uBAAK5B,GAAG,IAAI4B,UAAU,kBAClB,uBAAKA,UAAU,mBACX,uBAAKA,UAAU,kBAAkBC,IAAKC,EAAQ,IAAyBC,IAAI,KAC3E,sBAAIH,UAAU,QAAd,SAA2B,2BAA3B,8BACA,sBAAIA,UAAU,QAAd,6BACA,uBAAKA,UAAU,QAAf,sQAIA,uBAAKA,UAAU,eACX,gBAACI,EAAA,EAAD,CAAQC,QAASC,KAAKC,YAAY,gBAAC,IAAD,MAAlC,wB,GAvCAC,aCyBbC,EAjCQ,CACnB,UAAa,CACT,CACI,YAAe,2BACf,SAAY,CACR,CACI,YAAe,6BACf,mBAAsB,IAE1B,CACI,QAAY,GACZ,mBAAuB,MAInC,CACI,YAAe,2BACf,SAAY,CACR,CACI,YAAgB,4BAChB,mBAAuB,IAE3B,CACI,QAAY,GACZ,mBAAuB,QCiB5BC,G,kBApCX,WAAYC,GAAa,IAAD,8BACpB,4CAAMA,KACDC,MAAQ,GAFO,E,kFAMpBN,KAAKO,SAASJ,GACdnB,QAAQC,IAAIe,KAAKM,S,+BASjB,OACI,6BAASxC,GAAG,cACR,yBAAK4B,UAAU,mBACX,6BACI,sCAGA,mD,GAzBKQ,IAAMM,YCkBpBC,G,uLAdP,OAEI,6BAAS3C,GAAG,YACR,yBAAK4B,UAAU,oBAAf,yB,GARgBQ,IAAMM,YCKtCZ,EAAQ,IAER,IAeec,EAfO,WACpB,OACE,yBAAKhB,UAAU,WACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,gBACb,kBAAC,EAAD,MAEA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCLYiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,MAAK,SAAAmC,GACjCA,EAAaC,kB","file":"static/js/main.1b232633.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 36;","module.exports = __webpack_public_path__ + \"static/media/asb.d63ad553.jpg\";","import * as React from 'react';\r\nimport './Header.css';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\n\r\n// import HomeIcon from '@material-ui/icons/Home';\r\n// const ScrollLink = Scroll.ScrollLink\r\n// import MenuIcon from '@material-ui/icons/Menu';\r\n// import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nfunction Header() {\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      background: 'white',\r\n      boxShadow: 'none'\r\n    },\r\n    toolBarProps : {\r\n      justifyContent: 'center'\r\n    },\r\n    buttonProperties: {\r\n      // backgroundColor : '#2e3192',\r\n      color: 'black',\r\n      textAlign: \"right\"\r\n    }\r\n  });\r\n  const classes = useStyles();\r\n\r\n  function downloadCv() {\r\n    console.log(\"downloading cb\")\r\n  }\r\n\r\n  return (\r\n    <AppBar position=\"sticky\" classes={{ root: classes.root }}>\r\n      <Toolbar classes={{root: classes.toolBarProps}}>\r\n        {/* <div className=\"menu-column-1\"> */}\r\n          <ul id=\"navigation-menu\">\r\n            <li><a href=\"#\">Home</a></li>\r\n            {/* <li><a href=\"#about\"> Skills</a></li> */}\r\n            <li><a href=\"#experience\"> Work Experience</a></li>\r\n            <li><a href=\"#projects\"> Projects</a></li>\r\n            <li><a href=\"#projects\"> Contact</a></li>\r\n          </ul>\r\n        {/* </div> */}\r\n     \r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\nexport default Header;","import * as React from 'react';\r\nimport \"../MainComponent/MainComponent.css\"\r\nimport { Button } from '@material-ui/core';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport axios from 'axios';\r\nimport download from 'downloadjs';\r\nconst baseUrl = \"./skills-images/\";\r\n\r\nclass MainComponent extends React.Component {\r\n\r\n    componentWillMount() {\r\n        \r\n    }\r\n\r\n    downloadCv() {\r\n        console.log(\"downloading cv\");\r\n        axios.get(\"http://localhost:8000/download/akshatcv\").then((res: any) => {\r\n            const blob = new Blob([res.body])\r\n            download(blob, 'akshat_bais_cv.pdf');\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"parent-column\">\r\n                {/* <div className=\"column1\">\r\n                    Primary Skills\r\n                    <ul>\r\n                        <li>\r\n                            <img src={require(baseUrl + \"angular.svg\")} />\r\n                        </li>\r\n                        <li><img src={require(baseUrl + \"nodejs.png\")} /></li>\r\n                        <li><img src={require(baseUrl + \"java.jpg\")} /></li>\r\n                        <li><img src={require(baseUrl + \"js.svg\")} /></li>\r\n                        <li><img src={require(baseUrl + \"docker.png\")} /></li>\r\n                    </ul>\r\n                </div> */}\r\n                <div id=\"#\" className=\"main-component\">\r\n                    <div className=\"profile-summary\">\r\n                        <img className=\"profile-picture\" src={require(\"../../images/asb.jpg\")} alt=\"\" />\r\n                        <h3 className=\"body\">Hey !!<br></br> This is Akshat Singh Bais</h3>\r\n                        <h4 className=\"body\"> &#60; Full Stack Engineer /></h4>\r\n                        <div className=\"body\">Technology Enthusiast.\r\n                      Demonstrated hand-on with several technologies both on front-end and back-end side. Love coding, developing logics and algorithms.\r\n                      Apart from development I enjoy reading book.You can scroll down to know more about me or download my CV.\r\n                      </div>\r\n                        <div className=\"download-cv\">\r\n                            <Button onClick={this.downloadCv}><GetAppIcon /> Download CV</Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* <div className=\"column2\">\r\n                    asdasd\r\n                </div> */}\r\n                {/* <div className=\"column3\">\r\n                    Secondary Skils\r\n                    <ul>\r\n                        <li><img src={require(baseUrl + \"react.png\")} /></li>\r\n                    </ul>\r\n                </div> */}\r\n\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default MainComponent;","const workExperience = {\r\n    \"companies\": [\r\n        {\r\n            \"companyName\": \"Tata Consultancy Service\",\r\n            \"projects\": [\r\n                {\r\n                    \"ProjectName\": \"Covenant Monitoring Engine\",\r\n                    \"projectDescription\": \"\"\r\n                },\r\n                {\r\n                    \"project\" : \"\",\r\n                    \"projectDescription\" : \"\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"companyName\": \"Tata Consultancy Service\",\r\n            \"projects\": [\r\n                {\r\n                    \"projectName\" : \"Enterprise Single Sign On\",\r\n                    \"projectDescription\" : \"\"\r\n                },\r\n                {\r\n                    \"project\" : \"\",\r\n                    \"projectDescription\" : \"\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n\r\n\r\n}\r\n\r\nexport default workExperience;","import React from 'react';\r\nimport workExperience from './work-exp';\r\nimport './WorkExperience.css'\r\nclass WorkExperience extends React.Component {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {}\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.setState(workExperience);\r\n        console.log(this.state)\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        var companies = [];\r\n        // companies = this.state.companies;\r\n\r\n        return (\r\n            <section id=\"experience\">\r\n                <div className=\"work-experience\">\r\n                    <div>\r\n                        <span>\r\n                            Work\r\n                    </span>\r\n                        <span>\r\n                            Experience\r\n                    </span>\r\n                    </div>\r\n\r\n                </div>\r\n            </section>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default WorkExperience;","import React from 'react';\r\nimport '../ProjectsComponent/ProjectsComponent.css'\r\nclass ProjectsComponent extends React.Component {\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <section id=\"projects\">\r\n                <div className=\"projects-section\">\r\n                    Projects Section\r\n                </div>\r\n            </section>\r\n        )\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default ProjectsComponent;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport MainComponent from './components/MainComponent/MainComponent';\nimport SkillsComponent from './components/SkillsComponent/SkillsComponent';\nimport WorkExperience from './components/WorkExperienceComponent/WorkExperience';\nimport ProjectsComponent from './components/ProjectsComponent/ProjectsComponent';\nrequire('require-context/register');\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"profile\">\n      <Header />\n      <div className=\"profile-body\">\n        <MainComponent />\n        {/* <SkillsComponent /> */}\n        <WorkExperience />\n        <ProjectsComponent />\n      </div>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}